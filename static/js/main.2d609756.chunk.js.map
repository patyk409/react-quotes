{"version":3,"sources":["logo.svg","components/DisplayQuote.js","components/RandomQuote.js","components/PreviousQuote.js","components/Quote.js","App.js","reportWebVitals.js","index.js"],"names":["DisplayQyote","randomQuote","className","quote","author","RandomQuote","drawRandomQuote","onClick","PreviousQuote","getPreviousQuote","Quote","useState","quoteList","setQuoteList","setRandomQuote","prevQuoteRef","useRef","useEffect","axios","get","then","res","data","Math","floor","random","length","catch","err","console","error","current","prevQuote","App","src","logo","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAAe,G,MAAA,IAA0B,kC,+CCc1BA,EAZM,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAEtB,OACE,yBAAQC,UAAU,QAAlB,UACE,4BAAYA,UAAU,gBAAtB,SACE,4BAAID,EAAYE,UAElB,4BAAYD,UAAU,eAAtB,SAAsCD,EAAYG,aCEzCC,EATK,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBAErB,OACE,wBAAQJ,UAAU,sBAAsBK,QAASD,EAAjD,2BCMWE,EATO,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,iBAEvB,OACE,wBAAQP,UAAU,wBAAwBK,QAASE,EAAnD,6BCuDWC,EAnDD,WAEZ,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAsCF,mBAAS,IAA/C,mBAAOV,EAAP,KAAoBa,EAApB,KAGMC,EAAeC,mBAGrBC,qBAAU,WACRC,IACGC,IACC,yIAEDC,MAAK,SAACC,GACLR,EAAaQ,EAAIC,MACjBR,EAAeO,EAAIC,KAAKC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAIC,KAAKI,aAE7DC,OAAM,SAACC,GACNC,QAAQC,MAAMF,QAEjB,IAGHX,qBAAU,WACRF,EAAagB,QAAU9B,KAEzB,IAAM+B,EAAYjB,EAAagB,QAa/B,OACE,iCACE,cAAC,EAAD,CAAc9B,YAAaA,IAC3B,sBAAKC,UAAU,mBAAf,UACE,cAAC,EAAD,CAAeO,iBAdI,WACvBK,EAAekB,MAcX,cAAC,EAAD,CAAa1B,gBAVK,WACtBQ,EAAeF,EAAUW,KAAKC,MAAMD,KAAKE,SAAWb,EAAUc,oBC7BnDO,MAXf,WACE,OACE,sBAAK/B,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,qBAAKgC,IAAKC,EAAMjC,UAAU,WAAWkC,IAAI,WAE3C,cAAC,EAAD,QCCSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2d609756.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\r\n\r\nconst DisplayQyote = ({ randomQuote }) => {\r\n  // jsx\r\n  return (\r\n    <figure className=\"Quote\">\r\n      <blockquote className=\"Quote-content\">\r\n        <q>{randomQuote.quote}</q>\r\n      </blockquote>\r\n      <figcaption className=\"Quote-author\">{randomQuote.author}</figcaption>\r\n    </figure>\r\n  )\r\n}\r\n\r\nexport default DisplayQyote\r\n","import React from 'react'\r\n\r\nconst RandomQuote = ({ drawRandomQuote }) => {\r\n  // jsx\r\n  return (\r\n    <button className=\"Random-quote-button\" onClick={drawRandomQuote}>\r\n      random quote\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default RandomQuote\r\n","import React from 'react'\r\n\r\nconst PreviousQuote = ({ getPreviousQuote }) => {\r\n  // jsx\r\n  return (\r\n    <button className=\"Previous-quote-button\" onClick={getPreviousQuote}>\r\n      previous quote\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default PreviousQuote\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport axios from 'axios'\r\nimport '../style/Quote.css'\r\n\r\n// components\r\nimport DisplayQyote from './DisplayQuote'\r\nimport RandomQuote from './RandomQuote'\r\nimport PreviousQuote from './PreviousQuote'\r\n\r\nconst Quote = () => {\r\n  // states of quote list and random quote\r\n  const [quoteList, setQuoteList] = useState([])\r\n  const [randomQuote, setRandomQuote] = useState([])\r\n\r\n  // previous state reference\r\n  const prevQuoteRef = useRef()\r\n\r\n  // gets data from api and assigns to states\r\n  useEffect(() => {\r\n    axios\r\n      .get(\r\n        'https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json',\r\n      )\r\n      .then((res) => {\r\n        setQuoteList(res.data)\r\n        setRandomQuote(res.data[Math.floor(Math.random() * res.data.length)])\r\n      })\r\n      .catch((err) => {\r\n        console.error(err)\r\n      })\r\n  }, [])\r\n\r\n  // keeps the current state and assigns it to reference\r\n  useEffect(() => {\r\n    prevQuoteRef.current = randomQuote\r\n  })\r\n  const prevQuote = prevQuoteRef.current\r\n\r\n  // assigns previous state value to random quote state\r\n  const getPreviousQuote = () => {\r\n    setRandomQuote(prevQuote)\r\n  }\r\n\r\n  // generates random value and assigns to state\r\n  const drawRandomQuote = () => {\r\n    setRandomQuote(quoteList[Math.floor(Math.random() * quoteList.length)])\r\n  }\r\n\r\n  // jsx\r\n  return (\r\n    <main>\r\n      <DisplayQyote randomQuote={randomQuote} />\r\n      <div className=\"Quote-button-box\">\r\n        <PreviousQuote getPreviousQuote={getPreviousQuote} />\r\n        <RandomQuote drawRandomQuote={drawRandomQuote} />\r\n      </div>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default Quote\r\n","import logo from './logo.svg'\nimport './App.css'\n\nimport Quote from './components/Quote'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <Quote />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}